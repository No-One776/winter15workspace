import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.RowSpec;

public class LRUSimGUI {

	private JFrame mainFrame;
	private JTable frameTable, pageTable, recordsTable;
	private JLabel lblProcessAccessing, lblProcess;
	private LRUSim sim = new LRUSim("input.txt");
	private String[] tableNames = { "Page #", "Frame #" };
	private Object[][] pageData = new Object[16][2];
	private String[] columnNames = { "Frame #", "ProcID", "Page #" };
	private Object[][] frameData = new Object[16][3];
	private String[] recordNames = { "ProcID", "Total Pages", "Mem Ref's",
			"Faults", "Non-Faults" };
	private Object[][] recordData = new Object[5][5];

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					LRUSimGUI window = new LRUSimGUI();
					window.mainFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public LRUSimGUI() {
		initialize();
	}

	// TODO: have this update the display on end & victim page
	public void updateDisplay() {
		lblProcessAccessing.setText("Process #" + sim.getpID()
				+ " accessing the new Page #" + sim.getPageRef());
		lblProcess.setText("Process #" + sim.getpID() + "'s Page Table");

		Records[] r = sim.getProcessInfo();
		PageTable[] p = sim.getPageTable();
		PageFrameTable[] f = sim.getFrameTable();
		for (int x = 0; x < 16; x++) {
			frameData[x][1] = f[x].procId;
			frameData[x][2] = f[x].pageRef;
			pageData[x][1] = p[sim.getpID()].pagesFrame[x];

		}
		frameTable.updateUI();
		pageTable.updateUI();
		for (int x = 1; x < 6; x++) {
			int off = x - 1;
			recordData[off][1] = r[x].totalPages;
			recordData[off][2] = r[x].memRefs;
			recordData[off][3] = r[x].pageFaults;
			recordData[off][4] = r[x].nonPageFaults;
		}
		recordsTable.updateUI();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		mainFrame = new JFrame();
		mainFrame.setBounds(100, 100, 800, 550);
		mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel buttonPanel = new JPanel();
		mainFrame.getContentPane().add(buttonPanel, BorderLayout.SOUTH);

		JButton btnNext = new JButton("Run Next");
		btnNext.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				sim.runNextLine();
				updateDisplay();
			}
		});
		buttonPanel.add(btnNext);

		JButton btnNextFault = new JButton("Run to Next Fault");
		btnNextFault.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				sim.runTillNextFault();
				updateDisplay();
			}
		});
		buttonPanel.add(btnNextFault);

		JButton btnRunToEnd = new JButton("Run to End");
		btnRunToEnd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				sim.runTillEnd();
				updateDisplay();
			}
		});
		buttonPanel.add(btnRunToEnd);

		/* North Panel for displaying current process accessing info */
		JPanel northPanel = new JPanel();
		mainFrame.getContentPane().add(northPanel, BorderLayout.NORTH);

		lblProcessAccessing = new JLabel("Process #" + sim.getpID()
				+ " accessing Page #" + sim.getPageRef());
		northPanel.add(lblProcessAccessing);

		/* Center Panel for displaying current table info */
		JPanel tablePanel = new JPanel();
		mainFrame.getContentPane().add(tablePanel, BorderLayout.CENTER);
		tablePanel.setLayout(new FormLayout(new ColumnSpec[] {
				ColumnSpec.decode("200px"), ColumnSpec.decode("200px"),
				ColumnSpec.decode("350px"), }, new RowSpec[] { RowSpec
				.decode("405px"), }));

		lblProcess = new JLabel("Process #" + sim.getpID() + "'s Page Table");
		for (int x = 0; x < 16; x++)
			pageData[x][0] = x;
		pageTable = new JTable(pageData, tableNames);
		tablePanel.add(lblProcess, "1, 1, center, top");
		tablePanel.add(new JScrollPane(pageTable), "1, 1, center, center");

		JLabel lblPhysicalMemory = new JLabel("Physical Memory");
		tablePanel.add(lblPhysicalMemory, "2, 1, center, top");
		for (int x = 0; x < 16; x++)
			frameData[x][0] = x;
		frameTable = new JTable(frameData, columnNames);
		frameTable.setName("Physical Memory");
		frameTable.setSize(200, 250);
		JScrollPane frame = new JScrollPane(frameTable);
		frame.setSize(200, 150);
		tablePanel.add(frame, "2, 1, center, center");

		JLabel lblRecords = new JLabel("Process Records");
		tablePanel.add(lblRecords, "3, 1, center, top");
		for (int x = 1; x < 6; x++)
			recordData[x - 1][0] = x;
		recordsTable = new JTable(recordData, recordNames);
		tablePanel.add(new JScrollPane(recordsTable), "3, 1, center,center");
	}
}
