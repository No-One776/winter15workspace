import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * @author rohrj
 * @description: A system that uses memory management and page replacement to
 *               implement virtual memory.
 */
public class LRUSim {
	private static BufferedReader fileToRead;
	private static final int numProcesses = 6;
	private static final int physicalMemSize = 16;
	private static int[] pageFaults = new int[numProcesses];
	private static int[] nonPageFaults = new int[numProcesses];
	private static Records[] processInfo = new Records[numProcesses];
	private static PageTable[] pageTable = new PageTable[numProcesses];
	private static PageFrameTable[] frameTable = new PageFrameTable[physicalMemSize];
	private static int framePointer = 0, pID = 0, pageRef = 0;

	public static void main(String[] args) {
		if (args.length > 0)
			initialize(args[0]);
		else {
			System.err.println("Need a file argument");
			System.exit(0);
		}
		String in;
		try {
			while ((in = fileToRead.readLine()) != null) {
				parseData(in);
				System.out.println("P" + pID + " accessing page #" + pageRef);
				storeRecords();
				lruImplementation();
			}
		} catch (IOException e) {
			System.out.println("Error reading file");
		}

		for (int x = 1; x < numProcesses; x++) {
			System.out.print("Process #" + x + " Total Page Size: "
					+ processInfo[x].totalPages + "\tTotal Memory References: "
					+ processInfo[x].memRefs);
			System.out.print("\tTotal Page Faults for P" + x + ": "
					+ pageFaults[x]);
			System.out.println("\tTotal Non-Page Faults for P" + x + ": "
					+ nonPageFaults[x]);
		}
		System.out.println("Page Frame Table\nFrame# ProcID Page#");
		for (int x = 0; x < physicalMemSize; x++) {
			System.out.println(x + "\t" + frameTable[x].procId + "\t"
					+ frameTable[x].pageRef);
		}
	}

	// Initialize the file reader and arrays for use
	private static void initialize(String fileName) {
		try { // Create Readers
			FileReader file = new FileReader(fileName);
			fileToRead = new BufferedReader(file);
		} catch (FileNotFoundException e) {
			System.out.println("Error Creating Read File...");
		}
		// Instantiate Arrays for use
		for (int r = 0; r < numProcesses; r++) {
			processInfo[r] = new Records();
			pageTable[r] = new PageTable();
		}
		for (int m = 0; m < physicalMemSize; m++) {
			for (int r = 0; r < numProcesses; r++)
				pageTable[r].pagesFrame[m] = -1;
			frameTable[m] = new PageFrameTable();
		}
	}

	// Update the record information for the overall simulation statistics
	private static void storeRecords() {
		if (pageRef >= processInfo[pID].totalPages)
			processInfo[pID].totalPages = pageRef + 1;
		processInfo[pID].memRefs++;
	}

	// Parse the string into the int id and the page reference number
	private static void parseData(String in) {
		String[] parts = in.split(":");
		pageRef = Integer.parseInt(parts[1].substring(1), 2);
		parts = parts[0].split("P");
		pID = Integer.parseInt(parts[1]);
	}

	// Algorithm to find a free frame to put a frame or clear one to use
	private static void lruImplementation() {
		if (pageTable[pID].pagesFrame[pageRef] != -1) { // Already Paged
			frameTable[pageTable[pID].pagesFrame[pageRef]].recentlyUsed = true;
			nonPageFaults[pID]++;
		} else { // If there are free frames, just add it, else loop
			boolean notPlaced = true;
			while (notPlaced) {
				if (frameTable[framePointer].procId == -1) {
					updatePageFrameTable(framePointer);
					notPlaced = false;
				} else if (!frameTable[framePointer].recentlyUsed) {
					pageTable[frameTable[framePointer].procId].pagesFrame[frameTable[framePointer].pageRef] = -1;
					updatePageFrameTable(framePointer);
					notPlaced = false;
					System.out
							.println("No free frames, replacing physical page at: "
									+ framePointer);
				} else if (frameTable[framePointer].recentlyUsed)
					frameTable[framePointer].recentlyUsed = false;
				framePointer++;
				if (framePointer == physicalMemSize)
					framePointer = 0;
			}
		}
	}

	// Takes the given spot and updates the frame table & process page table
	private static void updatePageFrameTable(int pointer) {
		frameTable[pointer].procId = pID;
		frameTable[pointer].pageRef = pageRef;
		frameTable[pointer].recentlyUsed = true;
		pageTable[pID].pagesFrame[pageRef] = pointer;
		pageFaults[pID]++;
	}
}

class Records {
	// If the pages number is greater than or equal this, make this pageNum + 1;
	public int totalPages = 0;
	public int memRefs = 0;
}

class PageTable {
	// PageTable[ProcessID].pagesFrame[pageNumber] = the pages frame number
	public int[] pagesFrame = new int[16];
}

class PageFrameTable {
	public int pageRef = -1;
	public int procId = -1;
	public boolean recentlyUsed = false;
}
